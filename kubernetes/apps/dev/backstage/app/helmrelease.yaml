---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: backstage
spec:
  interval: 30m
  chart:
    spec:
      chart: backstage
      version: 2.5.1
      sourceRef:
        kind: HelmRepository
        name: backstage
        namespace: dev
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    replicas: 1
    backstage:
      initContainers:
        - name: 01-init-db
          image: ghcr.io/home-operations/postgres-init:17
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: &secret backstage-secret
      image:
        repository: ghcr.io/backstage/backstage
        tag: 1.39.0-next.2@sha256:fec09d221dcc61285d513cb8a61883f153630358948d61c5fca1bf02ae2beac8
        pullPolicy: IfNotPresent
      containerPorts:
        backend: 7007
      # readinessProbe: &probes
      #   failureThreshold: 3
      #   httpGet:
      #     path: /healthcheck
      #     port: 7007
      #     scheme: HTTP
      #   initialDelaySeconds: 30
      #   periodSeconds: 10
      #   successThreshold: 2
      #   timeoutSeconds: 2
      # livenessProbe: *probes
      # podSecurityContext:
      #   runAsUser: 1000
      #   runAsGroup: 1000
      #   fsGroup: 1000
      #   fsGroupChangePolicy: OnRootMismatch
      # We're using external psql database instead of
      extraEnvVarsSecrets:
        - *secret
      appConfig:
        app:
          baseUrl: https://backstage.g-eye.io
        backend:
          baseUrl: https://backstage.g-eye.io
          #listen: :7007
          csp:
            connect-src: ["'self'", "http:", "https:"]
            img-src: ["'self'", "storage.googleapis.com"]
          # psql database configuration
          database:
            client: pg
            connection:
              host: ${POSTGRES_HOST}
              user: ${POSTGRES_USER}
              password: ${POSTGRES_PASSWORD}
              port: "5432"
          # ssl:
          #   #ca: # if you have a CA file and want to verify it you can uncomment this section
          #   #$file: <file-path>/file.crt
          #   require: true
          #   rejectUnauthorized: false
        techdocs:
          builder: "local" # Alternatives - 'external'
        generator:
          runIn: "local" # Alternatives - 'local'
        publisher:
          type: "local" # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
        catalog:
          # Overrides the default list locations from app-config.yaml as these contain example data.
          # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
          # on how to get entities into the catalog.
          import:
            entityFilename: catalog-info.yaml
            pullRequestBranchName: backstage-integration
          rules:
            - allow: [Component, System, API, Resource, Location, User, Group, Domain]
          locations:
            - type: url
              target: https://github.com/tyriis/home-ops/blob/main/.backstage/catalog-info.yaml
            - type: url
              target: https://github.com/techtales-io/backstage-docs/blob/main/knowledge/catalog-info.yaml
            - type: file
              target: /.backstage/catalog-info.yaml
              rules:
                - allow: [User, Group]

    metrics:
      serviceMonitor:
        enabled: true
        path: /metrics
