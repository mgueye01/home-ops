logging {
  level  = "warn"
  format = "json"
}

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.kubernetes "services" {
  role = "service"
}

discovery.relabel "pods" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_pod_phase"]
    regex         = "Pending|Succeeded|Failed|Completed"
    action        = "drop"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_kubectl_kubernetes_io_default_container"]
    regex         = "(.+)"
    target_label  = "__tmp_container_name"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    regex         = "(.+)"
    target_label  = "__tmp_container_name"
  }

  rule {
    source_labels = ["__tmp_container_name"]
    regex         = "(POD|^$)"
    action        = "drop"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    target_label  = "node_name"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    target_label  = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
    target_label  = "instance"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component"]
    target_label  = "component"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    target_label  = "__path__"
    separator     = "/"
    replacement   = "/var/log/pods/*${1}/*.log"
  }
}

loki.source.kubernetes "pods" {
  targets    = discovery.relabel.pods.output
  forward_to = [loki.process.pods.receiver]
}

loki.process "pods" {
  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  forward_to = [loki.write.default.receiver]
}

loki.source.kubernetes_events "events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  namespaces = []
  forward_to = [loki.process.events.receiver]
}

loki.process "events" {
  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push"
  }
}
