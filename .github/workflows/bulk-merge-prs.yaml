---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Bulk Merge Pull Requests

on:
  workflow_dispatch:
    inputs:
      author:
        description: 'PR Author Filter (e.g., app/g-eye-bot, leave empty for all)'
        required: false
        default: 'app/g-eye-bot'
      label:
        description: 'PR Label Filter (leave empty for all)'
        required: false
        default: ''
      limit:
        description: 'Maximum number of PRs to merge'
        required: false
        default: '20'
      dryRun:
        description: 'Dry run (only show what would be merged)'
        required: false
        default: 'false'
        type: boolean

jobs:
  bulk-merge:
    name: Bulk Merge PRs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Bulk Approve and Merge PRs
        env:
          GH_TOKEN: "${{ steps.app-token.outputs.token }}"
          AUTHOR_FILTER: "${{ inputs.author }}"
          LABEL_FILTER: "${{ inputs.label }}"
          LIMIT: "${{ inputs.limit }}"
          DRY_RUN: "${{ inputs.dryRun }}"
        run: |
          echo "ü§ñ Bulk PR Merge Tool"
          echo "===================="
          echo "Author Filter: ${AUTHOR_FILTER:-(none)}"
          echo "Label Filter: ${LABEL_FILTER:-(none)}"
          echo "Limit: ${LIMIT}"
          echo "Dry Run: ${DRY_RUN}"
          echo ""

          # Normalize empty strings
          if [ -z "$AUTHOR_FILTER" ]; then
            AUTHOR_FILTER="all"
          fi
          if [ -z "$LABEL_FILTER" ]; then
            LABEL_FILTER="all"
          fi

          echo "Normalized filters: author='${AUTHOR_FILTER}' label='${LABEL_FILTER}'"
          echo ""

          # Build gh pr list command
          GH_CMD="gh pr list --state open --limit ${LIMIT} --json number,title,author,labels,headRefName"

          # Fetch PRs
          echo "üìã Fetching open PRs..."
          PRS=$(eval "$GH_CMD")

          RAW_COUNT=$(echo "$PRS" | jq '. | length')
          echo "Debug: Raw PRs count: ${RAW_COUNT}"

          if [ "$RAW_COUNT" -eq 0 ]; then
            echo "‚ùå No open PRs found in repository"
            exit 0
          fi

          # Show sample PR for debugging
          echo "Debug: Sample PR:"
          echo "$PRS" | jq '.[0] | {number, author: .author.login, labels: (.labels // [] | map(.name))}' || true
          echo ""

          # Filter PRs
          FILTERED_PRS=$(echo "$PRS" | jq -c --arg author "$AUTHOR_FILTER" --arg label "$LABEL_FILTER" '
            map(select(
              # Author filter
              (($author == "" or $author == "all") or (.author.login == $author)) and
              # Label filter (if empty or "all", skip label check)
              (($label == "" or $label == "all") or ((.labels // []) | map(.name) | contains([$label])))
            ))[]
          ')

          FILTERED_COUNT=$(echo "$FILTERED_PRS" | wc -l | tr -d ' ')
          echo "Debug: Filtered PRs count: ${FILTERED_COUNT}"
          echo ""

          if [ "$FILTERED_COUNT" -eq 0 ] || [ -z "$FILTERED_PRS" ]; then
            echo "‚ùå No PRs found matching the criteria"
            echo ""
            echo "Troubleshooting:"
            echo "- Check that author matches: '${AUTHOR_FILTER}'"
            echo "- Current PRs have authors like: $(echo "$PRS" | jq -r '.[0].author.login')"
            exit 0
          fi

          # Count PRs
          PR_COUNT=$(echo "$FILTERED_PRS" | wc -l | tr -d ' ')
          echo "‚úÖ Found ${PR_COUNT} PRs to process"
          echo ""

          # Process each PR
          MERGED_COUNT=0
          FAILED_COUNT=0

          while IFS= read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            PR_TITLE=$(echo "$pr" | jq -r '.title')
            PR_AUTHOR=$(echo "$pr" | jq -r '.author.login')
            PR_BRANCH=$(echo "$pr" | jq -r '.headRefName')

            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üîÑ Processing PR #${PR_NUMBER}"
            echo "   Title: ${PR_TITLE}"
            echo "   Author: ${PR_AUTHOR}"
            echo "   Branch: ${PR_BRANCH}"

            if [ "$DRY_RUN" = "true" ]; then
              echo "   ‚ö†Ô∏è  DRY RUN - Would approve and merge this PR"
              MERGED_COUNT=$((MERGED_COUNT + 1))
              continue
            fi

            # Check if PR is mergeable (query individual PR to get fresh status)
            echo "   üîç Checking merge status..."
            PR_STATE=$(gh pr view "$PR_NUMBER" --json mergeable,mergeStateStatus --jq '.mergeable + "|" + .mergeStateStatus')
            MERGEABLE=$(echo "$PR_STATE" | cut -d'|' -f1)
            MERGE_STATUS=$(echo "$PR_STATE" | cut -d'|' -f2)

            echo "   Status: mergeable=$MERGEABLE, state=$MERGE_STATUS"

            # Accept MERGEABLE status or CLEAN/UNSTABLE merge state
            if [ "$MERGEABLE" = "MERGEABLE" ] || [ "$MERGE_STATUS" = "CLEAN" ]; then
              echo "   ‚úÖ PR is ready to merge"
            elif [ "$MERGEABLE" = "CONFLICTING" ] || [ "$MERGE_STATUS" = "DIRTY" ]; then
              echo "   ‚ùå Cannot merge - PR has conflicts"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              continue
            elif [ "$MERGE_STATUS" = "BLOCKED" ]; then
              echo "   ‚ùå Cannot merge - PR is blocked (required checks or reviews)"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              continue
            else
              echo "   ‚ö†Ô∏è  Merge status unclear (mergeable=$MERGEABLE, state=$MERGE_STATUS)"
              echo "   ‚ö†Ô∏è  Attempting merge anyway..."
            fi

            # Approve PR
            echo "   ‚úÖ Approving PR..."
            if gh pr review "$PR_NUMBER" --approve --body "‚úÖ Bulk approval via GitHub Actions" 2>&1; then
              echo "   ‚úÖ Approved successfully"
            else
              echo "   ‚ö†Ô∏è  Approval failed (may already be approved)"
            fi

            # Merge PR
            echo "   üîÄ Merging PR..."
            if gh pr merge "$PR_NUMBER" --auto --squash --delete-branch 2>&1; then
              echo "   ‚úÖ Merged successfully"
              MERGED_COUNT=$((MERGED_COUNT + 1))
            else
              echo "   ‚ùå Merge failed"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi

            # Small delay to avoid rate limiting
            sleep 2

          done <<< "$FILTERED_PRS"

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Summary"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Total PRs Found: ${PR_COUNT}"
          echo "Successfully Merged: ${MERGED_COUNT}"
          echo "Failed/Skipped: ${FAILED_COUNT}"

          if [ "$DRY_RUN" = "true" ]; then
            echo ""
            echo "‚ö†Ô∏è  DRY RUN MODE - No actual changes were made"
          fi

      - name: Summary
        if: always()
        run: |
          echo "### ü§ñ Bulk PR Merge Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Author Filter: \`${{ inputs.author || 'all' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Label Filter: \`${{ inputs.label || 'all' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Limit: \`${{ inputs.limit }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Dry Run: \`${{ inputs.dryRun }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the job logs for detailed results." >> $GITHUB_STEP_SUMMARY
